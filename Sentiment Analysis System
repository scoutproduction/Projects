{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**Goal:** Determine if a text expresses positive or negative sentiment toward a specific object/entity"
      ],
      "metadata": {
        "id": "uUCnVQbCOqGZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from transformers import AutoTokenizer, AutoModelForSequenceClassification, pipeline\n",
        "import torch"
      ],
      "metadata": {
        "id": "GUBri45SP6pU"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class AdvancedObjectSentiment:\n",
        "    def __init__(self, target_object, model_name=\"cardiffnlp/twitter-roberta-base-sentiment-latest\"):\n",
        "        self.target_object = target_object\n",
        "        self.tokenizer = AutoTokenizer.from_pretrained(model_name)\n",
        "        self.model = AutoModelForSequenceClassification.from_pretrained(model_name)\n",
        "\n",
        "    def create_context_prompt(self, text):\n",
        "        \"\"\"Create a prompt that focuses on the object\"\"\"\n",
        "        return f\"Regarding {self.target_object}: {text}\"\n",
        "\n",
        "    def analyze_with_context(self, text):\n",
        "        # Create context-aware prompt\n",
        "        prompt = self.create_context_prompt(text)\n",
        "\n",
        "        # Tokenize and predict\n",
        "        inputs = self.tokenizer(prompt, return_tensors=\"pt\", truncation=True, max_length=512)\n",
        "\n",
        "        with torch.no_grad():\n",
        "            outputs = self.model(**inputs)\n",
        "            predictions = torch.nn.functional.softmax(outputs.logits, dim=-1)\n",
        "\n",
        "        # Get the predicted class\n",
        "        predicted_class = torch.argmax(predictions, dim=-1).item()\n",
        "        confidence = torch.max(predictions).item()\n",
        "\n",
        "        labels = [\"NEGATIVE\", \"NEUTRAL\", \"POSITIVE\"]  # Adjust based on your model\n",
        "\n",
        "        return {\n",
        "            \"sentiment\": labels[predicted_class],\n",
        "            \"confidence\": confidence,\n",
        "            \"raw_scores\": predictions.tolist()[0]\n",
        "        }\n"
      ],
      "metadata": {
        "id": "iOoONzf2PfKu"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "analyzer = AdvancedObjectSentiment(\"Apple iPhone\")\n",
        "result = analyzer.analyze_with_context(\"The new phone is okay but overpriced\")\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lPpSr55APh0Y",
        "outputId": "7ce1f3ec-5abe-463c-bbbb-206a9c8d145f"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of the model checkpoint at cardiffnlp/twitter-roberta-base-sentiment-latest were not used when initializing RobertaForSequenceClassification: ['roberta.pooler.dense.bias', 'roberta.pooler.dense.weight']\n",
            "- This IS expected if you are initializing RobertaForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n",
            "- This IS NOT expected if you are initializing RobertaForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'sentiment': 'NEUTRAL', 'confidence': 0.46333038806915283, 'raw_scores': [0.16638711094856262, 0.46333038806915283, 0.37028247117996216]}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "cbwdUgOdQKPs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "G8YeJZqfPr7v",
        "outputId": "12a0c047-d2fd-41fd-fb45-2959c6f60f1f"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "sentiment = result['sentiment']\n",
        "confidence = result['confidence']\n",
        "input_text = \"The new phone is okay but overpriced\"\n",
        "sentence = f\"For the text '{input_text}', the analysis shows a {sentiment.lower()} sentiment with a confidence score of {confidence:.2f}.\"\n",
        "print(sentence)\n",
        "\n",
        "# Create a bar chart of raw scores\n",
        "raw_scores = result['raw_scores']\n",
        "labels = [\"NEGATIVE\", \"NEUTRAL\", \"POSITIVE\"] #\n",
        "\n",
        "scores_series = pd.Series(raw_scores, index=labels)\n",
        "\n",
        "plt.figure(figsize=(6, 4))\n",
        "scores_series.plot(kind='bar', color=['red', 'gray', 'green'])\n",
        "plt.title('Sentiment Scores')\n",
        "plt.ylabel('Score')\n",
        "plt.ylim(0, 1)\n",
        "plt.xticks(rotation=0)\n",
        "plt.show()"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "For the text 'The new phone is okay but overpriced', the analysis shows a neutral sentiment with a confidence score of 0.46.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}
